-- ALL INDEX IN THE DATABASE ALONG WITH TABLENAME AND SIZE
SELECT 
OBJECT_SCHEMA_NAME(I.OBJECT_ID) AS SCHEMANAME
, OBJECT_NAME(I.OBJECT_ID) AS TABLENAME
, I.NAME AS INDEXNAME
, I.INDEX_ID AS INDEXID
, 8 * SUM(A.USED_PAGES) / 1024 AS 'INDEXSIZE(GB)'
FROM SYS.INDEXES AS I
JOIN SYS.PARTITIONS AS P ON P.OBJECT_ID = I.OBJECT_ID AND P.INDEX_ID = I.INDEX_ID
JOIN SYS.ALLOCATION_UNITS AS A ON A.CONTAINER_ID = P.PARTITION_ID
--WHERE I.NAME NOT LIKE 'PK%'
GROUP BY I.object_id, I.index_id, I.NAME
ORDER BY 'INDEXSIZE(GB)' DESC;

-- CHECK THE SIZE OF A SINGLE INDEX
SELECT 
  OBJECT_NAME(I.OBJECT_ID) AS TABLENAME
, I.NAME AS INDEXNAME
, 8 * SUM(A.USED_PAGES) / 1024 AS 'INDEXSIZE(GB)'
FROM SYS.INDEXES AS I
JOIN SYS.PARTITIONS AS P ON P.OBJECT_ID = I.OBJECT_ID AND P.INDEX_ID = I.INDEX_ID
JOIN SYS.ALLOCATION_UNITS AS A ON A.CONTAINER_ID = P.PARTITION_ID
WHERE I.NAME LIKE 'INDEXNAMEHERE'
GROUP BY I.object_id,  I.index_id, I.NAME

-- INDEX FILL FACTOR 
SELECT T.NAME AS TABLENAME, I.NAME INDEXNAME, FILL_FACTOR
FROM SYS.INDEXES I
JOIN SYS.TABLES T ON T.OBJECT_ID = I.OBJECT_ID
WHERE I.FILL_FACTOR < 80 AND I.FILL_FACTOR <> 0
AND I.IS_DISABLED = 0 AND I.IS_HYPOTHETICAL = 0;

-- TO GET SINGLE INDEX'S FILL_FACTOR AND SIZE BLEND THE ABOVE TWO 
--ADD , 8 * SUM(A.USED_PAGES) / 1024 AS 'INDEXSIZE(GB)' ; THE TWO JOINS (SYS.PARTITION AND ALLOCATION_UNITS); FILTER IN THE WHERE I.NAME LIKE 'INDEXNAME'; ADD IS_DISABLED AND IS_HYPOTHETICAL; GROUP BYL ALL 4 COLUMNS

SELECT 
  OBJECT_NAME(I.OBJECT_ID) AS TABLENAME
, I.NAME AS INDEXNAME, I.INDEX_ID AS INDEXID, p.partition_number
,p.data_compression_desc as CompressionType
from sys.partitions as p
join sys.indexes as i on p.object_id = i.object_id and p.index_id = i.index_id
where p.data_compression <> 0
order by tablename, indexname

-- CHECKING HOW MUCH SPACE CAN BE SAVED IF COMPRESSION IS APPLIED TO AN INDEX/PAGE
EXEC sp_estimate_data_compression_savings 'DBO', 'MYTABLENAME', NULL, NULL, 'PAGE'
